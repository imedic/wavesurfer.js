{"version":3,"sources":["webpack://WaveSurfer.[name]/webpack/universalModuleDefinition","webpack://WaveSurfer.[name]/webpack/bootstrap","webpack://WaveSurfer.[name]/./src/plugin/spectrogram.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","FFT","bufferSize","sampleRate","windowFunc","alpha","this","bandwidth","sinTable","Float32Array","cosTable","windowValues","reverseTable","Uint32Array","peakBand","peak","Math","abs","cos","PI","pow","E","undefined","sin","Error","limit","bit","calculateSpectrum","buffer","rval","ival","mag","real","imag","bSi","sqrt","spectrum","k","floor","log","LN2","length","phaseShiftStepReal","phaseShiftStepImag","currentPhaseShiftReal","currentPhaseShiftImag","off","tr","ti","tmpReal","halfSize","fftStep","N","SpectrogramPlugin","params","ws","wavesurfer","util","frequenciesDataUrl","_onScroll","e","updateScroll","_onRender","render","_onWrapperClick","_wrapperClickHandler","_onReady","drawer","container","document","querySelector","colorMap","val","push","width","pixelRatio","fftSamples","height","noverlap","createWrapper","createCanvas","wrapper","addEventListener","on","deferInit","staticProps","instance","isReady","once","unAll","un","removeEventListener","parentNode","removeChild","prevSpectrogram","wsParams","createElement","labels","labelsEl","classList","add","style","left","position","zIndex","appendChild","loadLabels","display","userSelect","webkitUserSelect","fillParent","scrollParent","overflowX","overflowY","event","preventDefault","relX","offsetX","layerX","fireEvent","canvas","spectrCc","getContext","updateCanvasStyle","loadFrequenciesData","getFrequencies","drawSpectrogram","round","frequenciesData","my","backend","getDuration","j","pixels","resample","heightFactor","numberOfChannels","fillStyle","fillRect","callback","channelOne","getChannelData","bufferLength","frequencies","uniqueSamplesPerPx","max","fft","currentOffset","segment","slice","array","Uint8Array","log10","url","request","fetchFile","data","JSON","parse","freq","toFixed","bgFill","fontSizeFreq","fontSizeUnit","fontType","textColorFreq","textColorUnit","textAlign","getMaxY","labelIndex","step","ac","ctx","fill","textBaseline","label","freqType","units","unitType","y","font","fillText","x","scrollLeft","target","oldMatrix","columnsNumber","newMatrix","oldPiece","newPiece","column","Array","oldStart","oldEnd","newStart","newEnd","overlap","min","intColumn"],"mappings":"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","file":"wavesurfer.spectrogram.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"spectrogram\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"spectrogram\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"spectrogram\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"localhost:8080/dist/plugin/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","/**\r\n * Calculate FFT - Based on https://github.com/corbanbrook/dsp.js\r\n */\r\n/* eslint-disable complexity, no-redeclare, no-var, one-var */\r\nconst FFT = function(bufferSize, sampleRate, windowFunc, alpha) {\r\n    this.bufferSize = bufferSize;\r\n    this.sampleRate = sampleRate;\r\n    this.bandwidth = (2 / bufferSize) * (sampleRate / 2);\r\n\r\n    this.sinTable = new Float32Array(bufferSize);\r\n    this.cosTable = new Float32Array(bufferSize);\r\n    this.windowValues = new Float32Array(bufferSize);\r\n    this.reverseTable = new Uint32Array(bufferSize);\r\n\r\n    this.peakBand = 0;\r\n    this.peak = 0;\r\n\r\n    var i;\r\n    switch (windowFunc) {\r\n        case 'bartlett':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    (2 / (bufferSize - 1)) *\r\n                    ((bufferSize - 1) / 2 - Math.abs(i - (bufferSize - 1) / 2));\r\n            }\r\n            break;\r\n        case 'bartlettHann':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    0.62 -\r\n                    0.48 * Math.abs(i / (bufferSize - 1) - 0.5) -\r\n                    0.38 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1));\r\n            }\r\n            break;\r\n        case 'blackman':\r\n            alpha = alpha || 0.16;\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    (1 - alpha) / 2 -\r\n                    0.5 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1)) +\r\n                    (alpha / 2) *\r\n                        Math.cos((4 * Math.PI * i) / (bufferSize - 1));\r\n            }\r\n            break;\r\n        case 'cosine':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] = Math.cos(\r\n                    (Math.PI * i) / (bufferSize - 1) - Math.PI / 2\r\n                );\r\n            }\r\n            break;\r\n        case 'gauss':\r\n            alpha = alpha || 0.25;\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] = Math.pow(\r\n                    Math.E,\r\n                    -0.5 *\r\n                        Math.pow(\r\n                            (i - (bufferSize - 1) / 2) /\r\n                                ((alpha * (bufferSize - 1)) / 2),\r\n                            2\r\n                        )\r\n                );\r\n            }\r\n            break;\r\n        case 'hamming':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    (0.54 - 0.46) *\r\n                    Math.cos((Math.PI * 2 * i) / (bufferSize - 1));\r\n            }\r\n            break;\r\n        case 'hann':\r\n        case undefined:\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    0.5 * (1 - Math.cos((Math.PI * 2 * i) / (bufferSize - 1)));\r\n            }\r\n            break;\r\n        case 'lanczoz':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    Math.sin(Math.PI * ((2 * i) / (bufferSize - 1) - 1)) /\r\n                    (Math.PI * ((2 * i) / (bufferSize - 1) - 1));\r\n            }\r\n            break;\r\n        case 'rectangular':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] = 1;\r\n            }\r\n            break;\r\n        case 'triangular':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    (2 / bufferSize) *\r\n                    (bufferSize / 2 - Math.abs(i - (bufferSize - 1) / 2));\r\n            }\r\n            break;\r\n        default:\r\n            throw Error(\"No such window function '\" + windowFunc + \"'\");\r\n    }\r\n\r\n    var limit = 1;\r\n    var bit = bufferSize >> 1;\r\n    var i;\r\n\r\n    while (limit < bufferSize) {\r\n        for (i = 0; i < limit; i++) {\r\n            this.reverseTable[i + limit] = this.reverseTable[i] + bit;\r\n        }\r\n\r\n        limit = limit << 1;\r\n        bit = bit >> 1;\r\n    }\r\n\r\n    for (i = 0; i < bufferSize; i++) {\r\n        this.sinTable[i] = Math.sin(-Math.PI / i);\r\n        this.cosTable[i] = Math.cos(-Math.PI / i);\r\n    }\r\n\r\n    this.calculateSpectrum = function(buffer) {\r\n        // Locally scope variables for speed up\r\n        var bufferSize = this.bufferSize,\r\n            cosTable = this.cosTable,\r\n            sinTable = this.sinTable,\r\n            reverseTable = this.reverseTable,\r\n            real = new Float32Array(bufferSize),\r\n            imag = new Float32Array(bufferSize),\r\n            bSi = 2 / this.bufferSize,\r\n            sqrt = Math.sqrt,\r\n            rval,\r\n            ival,\r\n            mag,\r\n            spectrum = new Float32Array(bufferSize / 2);\r\n\r\n        var k = Math.floor(Math.log(bufferSize) / Math.LN2);\r\n\r\n        if (Math.pow(2, k) !== bufferSize) {\r\n            throw 'Invalid buffer size, must be a power of 2.';\r\n        }\r\n        if (bufferSize !== buffer.length) {\r\n            throw 'Supplied buffer is not the same size as defined FFT. FFT Size: ' +\r\n                bufferSize +\r\n                ' Buffer Size: ' +\r\n                buffer.length;\r\n        }\r\n\r\n        var halfSize = 1,\r\n            phaseShiftStepReal,\r\n            phaseShiftStepImag,\r\n            currentPhaseShiftReal,\r\n            currentPhaseShiftImag,\r\n            off,\r\n            tr,\r\n            ti,\r\n            tmpReal;\r\n\r\n        for (var i = 0; i < bufferSize; i++) {\r\n            real[i] =\r\n                buffer[reverseTable[i]] * this.windowValues[reverseTable[i]];\r\n            imag[i] = 0;\r\n        }\r\n\r\n        while (halfSize < bufferSize) {\r\n            phaseShiftStepReal = cosTable[halfSize];\r\n            phaseShiftStepImag = sinTable[halfSize];\r\n\r\n            currentPhaseShiftReal = 1;\r\n            currentPhaseShiftImag = 0;\r\n\r\n            for (var fftStep = 0; fftStep < halfSize; fftStep++) {\r\n                var i = fftStep;\r\n\r\n                while (i < bufferSize) {\r\n                    off = i + halfSize;\r\n                    tr =\r\n                        currentPhaseShiftReal * real[off] -\r\n                        currentPhaseShiftImag * imag[off];\r\n                    ti =\r\n                        currentPhaseShiftReal * imag[off] +\r\n                        currentPhaseShiftImag * real[off];\r\n\r\n                    real[off] = real[i] - tr;\r\n                    imag[off] = imag[i] - ti;\r\n                    real[i] += tr;\r\n                    imag[i] += ti;\r\n\r\n                    i += halfSize << 1;\r\n                }\r\n\r\n                tmpReal = currentPhaseShiftReal;\r\n                currentPhaseShiftReal =\r\n                    tmpReal * phaseShiftStepReal -\r\n                    currentPhaseShiftImag * phaseShiftStepImag;\r\n                currentPhaseShiftImag =\r\n                    tmpReal * phaseShiftStepImag +\r\n                    currentPhaseShiftImag * phaseShiftStepReal;\r\n            }\r\n\r\n            halfSize = halfSize << 1;\r\n        }\r\n\r\n        for (var i = 0, N = bufferSize / 2; i < N; i++) {\r\n            rval = real[i];\r\n            ival = imag[i];\r\n            mag = bSi * sqrt(rval * rval + ival * ival);\r\n\r\n            if (mag > this.peak) {\r\n                this.peakBand = i;\r\n                this.peak = mag;\r\n            }\r\n            spectrum[i] = mag;\r\n        }\r\n        return spectrum;\r\n    };\r\n};\r\n/* eslint-enable complexity, no-redeclare, no-var, one-var */\r\n\r\n/**\r\n * @typedef {Object} SpectrogramPluginParams\r\n * @property {string|HTMLElement} container Selector of element or element in\r\n * which to render\r\n * @property {number} fftSamples=512 Number of samples to fetch to FFT. Must be\r\n * a power of 2.\r\n * @property {boolean} labels Set to true to display frequency labels.\r\n * @property {number} noverlap Size of the overlapping window. Must be <\r\n * fftSamples. Auto deduced from canvas size by default.\r\n * @property {string} windowFunc='hann' The window function to be used. One of\r\n * these: `'bartlett'`, `'bartlettHann'`, `'blackman'`, `'cosine'`, `'gauss'`,\r\n * `'hamming'`, `'hann'`, `'lanczoz'`, `'rectangular'`, `'triangular'`\r\n * @property {?number} alpha Some window functions have this extra value.\r\n * (Between 0 and 1)\r\n * @property {number} pixelRatio=wavesurfer.params.pixelRatio to control the\r\n * size of the spectrogram in relation with its canvas. 1 = Draw on the whole\r\n * canvas. 2 = Draw on a quarter (1/2 the length and 1/2 the width)\r\n * @property {?boolean} deferInit Set to true to manually call\r\n * `initPlugin('spectrogram')`\r\n * @property {?number[][]} colorMap A 256 long array of 4-element arrays.\r\n * Each entry should contain a float between 0 and 1 and specify\r\n * r, g, b, and alpha.\r\n */\r\n\r\n/**\r\n * Render a spectrogram visualisation of the audio.\r\n *\r\n * @implements {PluginClass}\r\n * @extends {Observer}\r\n * @example\r\n * // es6\r\n * import SpectrogramPlugin from 'wavesurfer.spectrogram.js';\r\n *\r\n * // commonjs\r\n * var SpectrogramPlugin = require('wavesurfer.spectrogram.js');\r\n *\r\n * // if you are using <script> tags\r\n * var SpectrogramPlugin = window.WaveSurfer.spectrogram;\r\n *\r\n * // ... initialising wavesurfer with the plugin\r\n * var wavesurfer = WaveSurfer.create({\r\n *   // wavesurfer options ...\r\n *   plugins: [\r\n *     SpectrogramPlugin.create({\r\n *       // plugin options ...\r\n *     })\r\n *   ]\r\n * });\r\n */\r\nexport default class SpectrogramPlugin {\r\n    /**\r\n     * Spectrogram plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * @param  {SpectrogramPluginParams} params Parameters used to initialise the plugin\r\n     * @return {PluginDefinition} An object representing the plugin.\r\n     */\r\n    static create(params) {\r\n        return {\r\n            name: 'spectrogram',\r\n            deferInit: params && params.deferInit ? params.deferInit : false,\r\n            params: params,\r\n            staticProps: {\r\n                FFT: FFT\r\n            },\r\n            instance: SpectrogramPlugin\r\n        };\r\n    }\r\n\r\n    constructor(params, ws) {\r\n        this.params = params;\r\n        this.wavesurfer = ws;\r\n        this.util = ws.util;\r\n\r\n        this.frequenciesDataUrl = params.frequenciesDataUrl;\r\n        this._onScroll = e => {\r\n            this.updateScroll(e);\r\n        };\r\n        this._onRender = () => {\r\n            this.render();\r\n        };\r\n        this._onWrapperClick = e => {\r\n            this._wrapperClickHandler(e);\r\n        };\r\n        this._onReady = () => {\r\n            const drawer = (this.drawer = ws.drawer);\r\n\r\n            this.container =\r\n                'string' == typeof params.container\r\n                    ? document.querySelector(params.container)\r\n                    : params.container;\r\n\r\n            if (!this.container) {\r\n                throw Error('No container for WaveSurfer spectrogram');\r\n            }\r\n            if (params.colorMap) {\r\n                if (params.colorMap.length < 256) {\r\n                    throw new Error('Colormap must contain 256 elements');\r\n                }\r\n                for (let i = 0; i < params.colorMap.length; i++) {\r\n                    const cmEntry = params.colorMap[i];\r\n                    if (cmEntry.length !== 4) {\r\n                        throw new Error(\r\n                            'ColorMap entries must contain 4 values'\r\n                        );\r\n                    }\r\n                }\r\n                this.colorMap = params.colorMap;\r\n            } else {\r\n                this.colorMap = [];\r\n                for (let i = 0; i < 256; i++) {\r\n                    const val = (255 - i) / 256;\r\n                    this.colorMap.push([val, val, val, 1]);\r\n                }\r\n            }\r\n            this.width = drawer.width;\r\n            this.pixelRatio = this.params.pixelRatio || ws.params.pixelRatio;\r\n            this.fftSamples =\r\n                this.params.fftSamples || ws.params.fftSamples || 512;\r\n            this.height = this.fftSamples / 2;\r\n            this.noverlap = params.noverlap;\r\n            this.windowFunc = params.windowFunc;\r\n            this.alpha = params.alpha;\r\n\r\n            this.createWrapper();\r\n            this.createCanvas();\r\n            this.render();\r\n\r\n            drawer.wrapper.addEventListener('scroll', this._onScroll);\r\n            ws.on('redraw', this._onRender);\r\n        };\r\n    }\r\n\r\n    init() {\r\n        // Check if wavesurfer is ready\r\n        if (this.wavesurfer.isReady) {\r\n            this._onReady();\r\n        } else {\r\n            this.wavesurfer.once('ready', this._onReady);\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.unAll();\r\n        this.wavesurfer.un('ready', this._onReady);\r\n        this.wavesurfer.un('redraw', this._onRender);\r\n        this.drawer.wrapper.removeEventListener('scroll', this._onScroll);\r\n        this.wavesurfer = null;\r\n        this.util = null;\r\n        this.params = null;\r\n        if (this.wrapper) {\r\n            this.wrapper.removeEventListener('click', this._onWrapperClick);\r\n            this.wrapper.parentNode.removeChild(this.wrapper);\r\n            this.wrapper = null;\r\n        }\r\n    }\r\n\r\n    createWrapper() {\r\n        const prevSpectrogram = this.container.querySelector('spectrogram');\r\n        if (prevSpectrogram) {\r\n            this.container.removeChild(prevSpectrogram);\r\n        }\r\n        const wsParams = this.wavesurfer.params;\r\n        this.wrapper = document.createElement('spectrogram');\r\n        // if labels are active\r\n        if (this.params.labels) {\r\n            const labelsEl = (this.labelsEl = document.createElement('canvas'));\r\n            labelsEl.classList.add('spec-labels');\r\n            this.drawer.style(labelsEl, {\r\n                left: 0,\r\n                position: 'absolute',\r\n                zIndex: 9,\r\n                height: `${this.height / this.pixelRatio}px`,\r\n                width: `${55 / this.pixelRatio}px`\r\n            });\r\n            this.wrapper.appendChild(labelsEl);\r\n            this.loadLabels(\r\n                'rgba(68,68,68,0.5)',\r\n                '12px',\r\n                '10px',\r\n                '',\r\n                '#fff',\r\n                '#f7f7f7',\r\n                'center',\r\n                '#specLabels'\r\n            );\r\n        }\r\n\r\n        this.drawer.style(this.wrapper, {\r\n            display: 'block',\r\n            position: 'relative',\r\n            userSelect: 'none',\r\n            webkitUserSelect: 'none',\r\n            height: `${this.height / this.pixelRatio}px`\r\n        });\r\n\r\n        if (wsParams.fillParent || wsParams.scrollParent) {\r\n            this.drawer.style(this.wrapper, {\r\n                width: '100%',\r\n                overflowX: 'hidden',\r\n                overflowY: 'hidden'\r\n            });\r\n        }\r\n        this.container.appendChild(this.wrapper);\r\n\r\n        this.wrapper.addEventListener('click', this._onWrapperClick);\r\n    }\r\n\r\n    _wrapperClickHandler(event) {\r\n        event.preventDefault();\r\n        const relX = 'offsetX' in event ? event.offsetX : event.layerX;\r\n        this.fireEvent('click', relX / this.width || 0);\r\n    }\r\n\r\n    createCanvas() {\r\n        const canvas = (this.canvas = this.wrapper.appendChild(\r\n            document.createElement('canvas')\r\n        ));\r\n\r\n        this.spectrCc = canvas.getContext('2d');\r\n\r\n        this.util.style(canvas, {\r\n            position: 'absolute',\r\n            zIndex: 4\r\n        });\r\n    }\r\n\r\n    render() {\r\n        this.updateCanvasStyle();\r\n\r\n        if (this.frequenciesDataUrl) {\r\n            this.loadFrequenciesData(this.frequenciesDataUrl);\r\n        } else {\r\n            this.getFrequencies(this.drawSpectrogram);\r\n        }\r\n    }\r\n\r\n    updateCanvasStyle() {\r\n        const width = Math.round(this.width / this.pixelRatio) + 'px';\r\n        this.canvas.width = this.width;\r\n        this.canvas.height = this.height;\r\n        this.canvas.style.width = width;\r\n    }\r\n\r\n    drawSpectrogram(frequenciesData, my) {\r\n        const spectrCc = my.spectrCc;\r\n        const length = my.wavesurfer.backend.getDuration();\r\n        const height = my.height;\r\n        const pixels = my.resample(frequenciesData);\r\n        const heightFactor = my.buffer ? 2 / my.buffer.numberOfChannels : 1;\r\n        let i;\r\n        let j;\r\n\r\n        for (i = 0; i < pixels.length; i++) {\r\n            for (j = 0; j < pixels[i].length; j++) {\r\n                const colorMap = my.colorMap[pixels[i][j]];\r\n                my.spectrCc.fillStyle =\r\n                    'rgba(' +\r\n                    colorMap[0] * 256 +\r\n                    ', ' +\r\n                    colorMap[1] * 256 +\r\n                    ', ' +\r\n                    colorMap[2] * 256 +\r\n                    ',' +\r\n                    colorMap[3] +\r\n                    ')';\r\n                my.spectrCc.fillRect(\r\n                    i,\r\n                    height - j * heightFactor,\r\n                    1,\r\n                    heightFactor\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    getFrequencies(callback) {\r\n        const fftSamples = this.fftSamples;\r\n        const buffer = (this.buffer = this.wavesurfer.backend.buffer);\r\n        const channelOne = buffer.getChannelData(0);\r\n        const bufferLength = buffer.length;\r\n        const sampleRate = buffer.sampleRate;\r\n        const frequencies = [];\r\n\r\n        if (!buffer) {\r\n            this.fireEvent('error', 'Web Audio buffer is not available');\r\n            return;\r\n        }\r\n\r\n        let noverlap = this.noverlap;\r\n        if (!noverlap) {\r\n            const uniqueSamplesPerPx = buffer.length / this.canvas.width;\r\n            noverlap = Math.max(0, Math.round(fftSamples - uniqueSamplesPerPx));\r\n        }\r\n\r\n        const fft = new FFT(\r\n            fftSamples,\r\n            sampleRate,\r\n            this.windowFunc,\r\n            this.alpha\r\n        );\r\n        const maxSlicesCount = Math.floor(\r\n            bufferLength / (fftSamples - noverlap)\r\n        );\r\n        let currentOffset = 0;\r\n\r\n        while (currentOffset + fftSamples < channelOne.length) {\r\n            const segment = channelOne.slice(\r\n                currentOffset,\r\n                currentOffset + fftSamples\r\n            );\r\n            const spectrum = fft.calculateSpectrum(segment);\r\n            const array = new Uint8Array(fftSamples / 2);\r\n            let j;\r\n            for (j = 0; j < fftSamples / 2; j++) {\r\n                array[j] = Math.max(-255, Math.log10(spectrum[j]) * 45);\r\n            }\r\n            frequencies.push(array);\r\n            currentOffset += fftSamples - noverlap;\r\n        }\r\n        callback(frequencies, this);\r\n    }\r\n\r\n    loadFrequenciesData(url) {\r\n        const request = this.util.fetchFile({ url: url });\r\n\r\n        request.on('success', data =>\r\n            this.drawSpectrogram(JSON.parse(data), this)\r\n        );\r\n        request.on('error', e => this.fireEvent('error', e));\r\n\r\n        return request;\r\n    }\r\n\r\n    freqType(freq) {\r\n        return freq >= 1000 ? (freq / 1000).toFixed(1) : Math.round(freq);\r\n    }\r\n\r\n    unitType(freq) {\r\n        return freq >= 1000 ? 'KHz' : 'Hz';\r\n    }\r\n\r\n    loadLabels(\r\n        bgFill,\r\n        fontSizeFreq,\r\n        fontSizeUnit,\r\n        fontType,\r\n        textColorFreq,\r\n        textColorUnit,\r\n        textAlign,\r\n        container\r\n    ) {\r\n        const frequenciesHeight = this.height;\r\n        bgFill = bgFill || 'rgba(68,68,68,0)';\r\n        fontSizeFreq = fontSizeFreq || '12px';\r\n        fontSizeUnit = fontSizeUnit || '10px';\r\n        fontType = fontType || 'Helvetica';\r\n        textColorFreq = textColorFreq || '#fff';\r\n        textColorUnit = textColorUnit || '#fff';\r\n        textAlign = textAlign || 'center';\r\n        container = container || '#specLabels';\r\n        const bgWidth = 55;\r\n        const getMaxY = frequenciesHeight || 512;\r\n        const labelIndex = 5 * (getMaxY / 256);\r\n        const freqStart = 0;\r\n        const step =\r\n            (this.wavesurfer.backend.ac.sampleRate / 2 - freqStart) /\r\n            labelIndex;\r\n\r\n        // prepare canvas element for labels\r\n        const ctx = this.labelsEl.getContext('2d');\r\n        this.labelsEl.height = this.height;\r\n        this.labelsEl.width = bgWidth;\r\n\r\n        // fill background\r\n        ctx.fillStyle = bgFill;\r\n        ctx.fillRect(0, 0, bgWidth, getMaxY);\r\n        ctx.fill();\r\n        let i;\r\n\r\n        // render labels\r\n        for (i = 0; i <= labelIndex; i++) {\r\n            ctx.textAlign = textAlign;\r\n            ctx.textBaseline = 'middle';\r\n\r\n            const freq = freqStart + step * i;\r\n            const index = Math.round(\r\n                (freq / (this.sampleRate / 2)) * this.fftSamples\r\n            );\r\n            const label = this.freqType(freq);\r\n            const units = this.unitType(freq);\r\n            const yLabelOffset = 2;\r\n            const x = 16;\r\n            let y;\r\n\r\n            if (i == 0) {\r\n                y = getMaxY + i - 10;\r\n                // unit label\r\n                ctx.fillStyle = textColorUnit;\r\n                ctx.font = fontSizeUnit + ' ' + fontType;\r\n                ctx.fillText(units, x + 24, y);\r\n                // freq label\r\n                ctx.fillStyle = textColorFreq;\r\n                ctx.font = fontSizeFreq + ' ' + fontType;\r\n                ctx.fillText(label, x, y);\r\n            } else {\r\n                y = getMaxY - i * 50 + yLabelOffset;\r\n                // unit label\r\n                ctx.fillStyle = textColorUnit;\r\n                ctx.font = fontSizeUnit + ' ' + fontType;\r\n                ctx.fillText(units, x + 24, y);\r\n                // freq label\r\n                ctx.fillStyle = textColorFreq;\r\n                ctx.font = fontSizeFreq + ' ' + fontType;\r\n                ctx.fillText(label, x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateScroll(e) {\r\n        if (this.wrapper) {\r\n            this.wrapper.scrollLeft = e.target.scrollLeft;\r\n        }\r\n    }\r\n\r\n    resample(oldMatrix) {\r\n        const columnsNumber = this.width;\r\n        const newMatrix = [];\r\n\r\n        const oldPiece = 1 / oldMatrix.length;\r\n        const newPiece = 1 / columnsNumber;\r\n        let i;\r\n\r\n        for (i = 0; i < columnsNumber; i++) {\r\n            const column = new Array(oldMatrix[0].length);\r\n            let j;\r\n\r\n            for (j = 0; j < oldMatrix.length; j++) {\r\n                const oldStart = j * oldPiece;\r\n                const oldEnd = oldStart + oldPiece;\r\n                const newStart = i * newPiece;\r\n                const newEnd = newStart + newPiece;\r\n\r\n                const overlap =\r\n                    oldEnd <= newStart || newEnd <= oldStart\r\n                        ? 0\r\n                        : Math.min(\r\n                              Math.max(oldEnd, newStart),\r\n                              Math.max(newEnd, oldStart)\r\n                          ) -\r\n                          Math.max(\r\n                              Math.min(oldEnd, newStart),\r\n                              Math.min(newEnd, oldStart)\r\n                          );\r\n                let k;\r\n                /* eslint-disable max-depth */\r\n                if (overlap > 0) {\r\n                    for (k = 0; k < oldMatrix[0].length; k++) {\r\n                        if (column[k] == null) {\r\n                            column[k] = 0;\r\n                        }\r\n                        column[k] += (overlap / newPiece) * oldMatrix[j][k];\r\n                    }\r\n                }\r\n                /* eslint-enable max-depth */\r\n            }\r\n\r\n            const intColumn = new Uint8Array(oldMatrix[0].length);\r\n            let m;\r\n\r\n            for (m = 0; m < oldMatrix[0].length; m++) {\r\n                intColumn[m] = column[m];\r\n            }\r\n\r\n            newMatrix.push(intColumn);\r\n        }\r\n\r\n        return newMatrix;\r\n    }\r\n}\r\n"],"sourceRoot":""}